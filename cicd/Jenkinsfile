def IMAGE_MAP = [
  'user-service': 'board-user-service',
  'file-service': 'board-file-service',
  'post-service': 'board-post-service',
  'frontend'    : 'board-frontend',
  'nginx'       : 'board-nginx',
]
def ALL_SERVICES = IMAGE_MAP.keySet() as List

pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: "buildkit"
spec:
  serviceAccountName: jenkins
  restartPolicy: Never
  volumes:
    - name: tls
      secret:
        secretName: buildkit-client-tls
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: buildctl
      image: moby/buildkit:rootless
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: tls, mountPath: /tls, readOnly: true }
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: git
      image: alpine/git:2.45.2
      securityContext: { runAsUser: 0, runAsGroup: 0 }
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: yq
      image: ghcr.io/mikefarah/yq:4
      securityContext: { runAsUser: 0, runAsGroup: 0 }
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: utils
      image: alpine:3.20
      securityContext: { runAsUser: 0, runAsGroup: 0 }
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
"""
    }
  }

  parameters {
    // ⬇ 기본값을 auto 로. 필요하면 ALL 로 전체 빌드 가능
    choice(name: 'SERVICE',
      choices: 'auto\nALL\nuser-service\nfile-service\npost-service\nfrontend\nnginx',
      description: 'auto=마지막 커밋에서 변경된 서비스 자동 감지, ALL=전부 빌드')
    // 선택적으로 여러 개를 콤마로 직접 지정하고 싶다면 (예: "file-service,frontend")
    string(name: 'SERVICES_CSV', defaultValue: '', description: '여러 서비스 수동 지정(쉼표구분). 비우면 SERVICE 사용')
    string(name: 'IMAGE_TAG', defaultValue: '', description: '비우면 vN 자동 증가')
    string(name: 'GIT_CRED_ID',  defaultValue: 'GITHUB_PAT', description: 'GitHub 소스/매니페스트 PAT')
    string(name: 'GHCR_CRED_ID', defaultValue: 'ghcr-owner', description: 'GHCR PAT (push 권한)')
  }

  options {
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    skipDefaultCheckout(true)
  }

  environment {
    REGISTRY = 'ghcr.io'
    ORG      = 'drsol-ha'
  }

  stages {
    stage('Checkout Jenkinsfile repo (self)') {
      steps { checkout scm }
    }

    stage('Checkout app repo') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
            sh '''
              set -eu
              rm -rf src && mkdir -p src
              AUTH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
              git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH}" \
                  clone --depth=2 -b main https://github.com/DRSOL-HA/WebBoard-Service.git src/app
              git -C src/app rev-parse --short=12 HEAD > .head_sha
            '''
          }
        }
      }
    }

    stage('Detect services to build') {
      steps {
        script {
          def selected = [] as Set
          if (params.SERVICES_CSV?.trim()) {
            params.SERVICES_CSV.split(/\s*,\s*/).each { s ->
              if (IMAGE_MAP.containsKey(s)) selected << s
            }
          } else if (params.SERVICE == 'ALL') {
            selected.addAll(ALL_SERVICES)
          } else if (params.SERVICE == 'auto') {
            // 마지막 커밋에서 변경된 상위 디렉토리 기준 감지
            container('git') {
              sh """
                set -eu
                git -C src/app show --name-only --pretty='' HEAD > .changed || true
                awk -F/ '
                  BEGIN {print ""} 
                  /^(user-service|file-service|post-service|frontend|nginx)\\// {print \$1}
                ' .changed | sort -u > .services
              """
            }
            def txt = readFile('.services').trim()
            if (txt) txt.split('\n').each { s -> if (IMAGE_MAP.containsKey(s)) selected << s }
          } else {
            if (IMAGE_MAP.containsKey(params.SERVICE)) selected << params.SERVICE
          }
          if (selected.isEmpty()) error "빌드할 서비스가 없습니다. (SERVICE=${params.SERVICE}, SERVICES_CSV='${params.SERVICES_CSV}')"
          writeFile file: '.services', text: selected.join('\n') + '\n'
          echo "빌드 대상: ${selected.join(', ')}"
        }
      }
    }

    stage('Sanity: GHCR push permission (each)') {
      steps {
        container('utils') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'U', passwordVariable: 'P')]) {
            sh '''
              set -eu
              apk add --no-cache curl jq ca-certificates >/dev/null
              > .push_ok
              while read -r SVC; do
                [ -n "$SVC" ] || continue
                case "$SVC" in
                  user-service) REPO="board-user-service" ;;
                  file-service) REPO="board-file-service" ;;
                  post-service) REPO="board-post-service" ;;
                  frontend)     REPO="board-frontend" ;;
                  nginx)        REPO="board-nginx" ;;
                  *) echo "Unknown service: $SVC" >&2; exit 2 ;;
                esac
                TOKEN="$(curl -sS -u "${U}:${P}" "https://ghcr.io/token?service=ghcr.io&scope=repository:${ORG}/${REPO}:pull,push" | jq -r .token)"
                [ -n "$TOKEN" ] && [ "$TOKEN" != "null" ] || { echo "GHCR token fail for ${REPO}"; exit 91; }
                CODE="$(curl -sS -o /dev/null -w '%{http_code}' -H "Authorization: Bearer ${TOKEN}" -X POST "https://ghcr.io/v2/${ORG}/${REPO}/blobs/uploads/")"
                case "$CODE" in 201|202) : ;; 401|403) echo "권한거부 ${REPO}"; exit 91 ;; 404) echo "미존재 ${REPO}"; exit 92 ;; *) echo "HTTP ${CODE} ${REPO}"; exit 93 ;; esac
              done < .services
              # 표식
              : > .push_ok
            '''
          }
        }
      }
    }

    stage('Decide tags (each)') {
      when { expression { return (params.IMAGE_TAG?.trim() == '') } }
      steps {
        container('utils') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'U', passwordVariable: 'P')]) {
            sh '''
              set -eu
              apk add --no-cache curl jq ca-certificates >/dev/null
              : > .tags
              while read -r SVC; do
                [ -n "$SVC" ] || continue
                case "$SVC" in
                  user-service) REPO="board-user-service" ;;
                  file-service) REPO="board-file-service" ;;
                  post-service) REPO="board-post-service" ;;
                  frontend)     REPO="board-frontend" ;;
                  nginx)        REPO="board-nginx" ;;
                esac
                TOKEN="$(curl -sS -u "${U}:${P}" "https://ghcr.io/token?service=ghcr.io&scope=repository:${ORG}/${REPO}:pull" | jq -r .token)"
                curl -sS -H "Authorization: Bearer ${TOKEN}" "https://ghcr.io/v2/${ORG}/${REPO}/tags/list?n=1000" > tags.json || echo '{"tags":[]}' > tags.json
                NEXT="$(jq -r '(.tags // []) | map(select(test("^v[0-9]+$"))) | (map(sub("^v";"")|tonumber) | max // 0) + 1 | "v"+tostring' tags.json)"
                echo "${SVC}:${NEXT}" >> .tags
              done < .services
              cat .tags
            '''
          }
        }
      }
    }

    stage('Use provided IMAGE_TAG for all (optional)') {
      when { expression { return (params.IMAGE_TAG?.trim() != '') } }
      steps {
        sh '''
          set -eu
          : > .tags
          while read -r SVC; do
            [ -n "$SVC" ] || continue
            echo "${SVC}:${IMAGE_TAG}" >> .tags
          done < .services
          cat .tags
        '''
      }
    }

    stage('Build & Push (each)') {
      steps {
        container('buildctl') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'U', passwordVariable: 'P')]) {
            sh '''
              set -eu
              export HOME="$PWD"
              export DOCKER_CONFIG="$PWD/.docker"
              mkdir -p "$DOCKER_CONFIG"
              AUTH="$(printf '%s:%s' "${U}" "${P}" | base64 | tr -d '\\n')"
              printf '{ "auths": { "%s": { "auth": "%s" } } }\n' "${REGISTRY}" "${AUTH}" > "$DOCKER_CONFIG/config.json"

              while IFS=':' read -r SVC TAG; do
                [ -n "$SVC" ] || continue
                [ -n "$TAG" ] || continue
                case "$SVC" in
                  user-service) REPO="board-user-service" ;;
                  file-service) REPO="board-file-service" ;;
                  post-service) REPO="board-post-service" ;;
                  frontend)     REPO="board-frontend" ;;
                  nginx)        REPO="board-nginx" ;;
                esac
                CONTEXT="src/app/${SVC}"
                test -f "${CONTEXT}/Dockerfile"

                IMAGE="${REGISTRY}/${ORG}/${REPO}"
                echo "[buildctl] ${SVC} -> ${IMAGE}:${TAG}"
                buildctl --addr tcp://buildkitd.buildkit.svc.cluster.local:1234 \
                  --tlscacert /tls/ca.crt --tlscert /tls/client.crt --tlskey /tls/client.key \
                  build \
                    --frontend=dockerfile.v0 \
                    --local "context=${CONTEXT}" \
                    --local "dockerfile=${CONTEXT}" \
                    --output "type=image,name=${IMAGE}:${TAG},push=true" \
                    --progress=plain \
                    --metadata-file ".buildmeta.${SVC}.json"
              done < .tags
            '''
          }
        }
      }
    }

stage('Bump manifest (single commit)') {
  when { expression { return fileExists('.push_ok') && fileExists('.tags') } }
  steps {
    // 1) clone (git 컨테이너)
    container('git') {
      withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
        sh '''
          set -eu
          rm -rf manifest && mkdir -p manifest && cd manifest
          AUTH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
          git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH}" \
              clone --depth=1 https://github.com/DRSOL-HA/deploy_manifest.git repo
        '''
      }
    }

    // 2) yq로 태그 수정 (yq 컨테이너)
    container('yq') {
      sh '''
        set -eu
        cd manifest/repo
        FILE="apps/board/kustomization.yaml"
        test -f "${FILE}"

        # .tags: "service:tag" 형식
        while IFS=':' read -r SVC TAG; do
          [ -n "$SVC" ] || continue
          case "$SVC" in
            user-service) IMG="ghcr.io/${ORG}/board-user-service" ;;
            file-service) IMG="ghcr.io/${ORG}/board-file-service" ;;
            post-service) IMG="ghcr.io/${ORG}/board-post-service" ;;
            frontend)     IMG="ghcr.io/${ORG}/board-frontend" ;;
            nginx)        IMG="ghcr.io/${ORG}/board-nginx" ;;
            *) echo "unknown service: $SVC" >&2; exit 2 ;;
          esac
          IMAGE_NAME_CANON="$IMG"
          NEW_TAG="$TAG"
          yq -i '
            (.images[] | select((.name | downcase) == (strenv(IMAGE_NAME_CANON) | downcase))).newTag
            = strenv(NEW_TAG)
          ' "${FILE}"
        done < "$WORKSPACE/.tags"
      '''
    }

    // 3) commit & push (git 컨테이너)
    container('git') {
      withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
        sh '''
          set -eu
          cd manifest/repo
          git config user.name  "jenkins"
          git config user.email "ci@drsol-ha.local"
          git add -A
          MSG="ci: bump $(tr '\\n' ' ' < "$WORKSPACE/.tags")"
          git commit -m "${MSG}" || true

          AUTH_PUSH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
          git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH_PUSH}" push origin HEAD:main
        '''
      }
    }
  }
}

  post {
    always {
      script {
        sh '''
          set -eu
          echo "HEAD_SHA=$(cat .head_sha || true)"
          echo "SERVICES:" && cat .services || true
          echo "TAGS:" && cat .tags || true
        '''
      }
    }
  }
}
