def IMAGE_MAP = [
  'user-service': 'board-user-service',
  'file-service': 'board-file-service',
  'post-service': 'board-post-service',
  'frontend'    : 'board-frontend',
  'nginx'       : 'board-nginx',
]
def ALL_SERVICES = IMAGE_MAP.keySet() as List

pipeline {
  agent {
    kubernetes {
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: "buildkit"
spec:
  serviceAccountName: jenkins
  restartPolicy: Never
  volumes:
    - name: tls
      secret:
        secretName: buildkit-client-tls
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: buildctl
      image: moby/buildkit:rootless
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: tls, mountPath: /tls, readOnly: true }
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: git
      image: alpine/git:2.45.2
      securityContext: { runAsUser: 0, runAsGroup: 0 }
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: yq
      image: ghcr.io/mikefarah/yq:4
      securityContext: { runAsUser: 0, runAsGroup: 0 }
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: utils
      image: alpine:3.20
      securityContext: { runAsUser: 0, runAsGroup: 0 }
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
"""
    }
  }

  parameters {
    // 선택적으로 모든 서비스에 동일 태그를 강제하고 싶으면 IMAGE_TAG 지정
    string(name: 'IMAGE_TAG', defaultValue: '', description: '모든 서비스에 공통 적용할 태그 (비우면 서비스별 vN 자동 증가)')
    // Jenkins Credentials ID
    string(name: 'GIT_CRED_ID',  defaultValue: 'GITHUB_PAT',  description: 'GitHub(소스/manifest) PAT 크리덴셜 ID')
    string(name: 'GHCR_CRED_ID', defaultValue: 'ghcr-owner',  description: 'GHCR(이미지 푸시) PAT 크리덴셜 ID')
  }

  options {
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    skipDefaultCheckout(true)
  }

  environment {
    REGISTRY = 'ghcr.io'
    ORG      = 'drsol-ha'  // 소문자 권장
  }

  stages {

    // 1) 앱 저장소 체크아웃
    stage('Checkout app repo') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
            sh '''
              set -eu
              rm -rf src && mkdir -p src
              AUTH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
              git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH}" \
                  clone --depth=2 -b main https://github.com/DRSOL-HA/WebBoard-Service.git src/app
              git -C src/app rev-parse --short=12 HEAD > .head_sha
            '''
          }
        }
      }
    }

    // 2) 변경된 서비스 감지 (최근 커밋 기준).
    stage('Detect services to build') {
      steps {
        container('git') {
          sh '''
            set -eu
            cd src/app
    
            # 1) 가장 안전한 방식: 마지막 커밋(HEAD)의 변경 파일만 읽기
            CHANGED="$(git show --name-only --pretty='' HEAD || true)"
    
            # 혹시라도 HEAD~1 이 있는 경우엔 두 커밋 비교도 시도(선택)
            if git rev-parse --verify HEAD~1 >/dev/null 2>&1; then
              CHANGED2="$(git diff --name-only HEAD~1 HEAD || true)"
              # 둘 중 더 긴 쪽 사용(빈값 방지)
              [ ${#CHANGED2} -gt ${#CHANGED} ] && CHANGED="$CHANGED2" || true
            fi
    
            cd - >/dev/null
    
            echo "변경 파일:"
            printf '%s\n' "$CHANGED"
    
            SERVICES=""
            for s in user-service file-service post-service frontend nginx; do
              if printf '%s\n' "$CHANGED" | grep -E "^${s}(/|$)" >/dev/null 2>&1; then
                SERVICES="${SERVICES}\\n${s}"
              fi
            done
    
            # 비어있으면 아무 것도 빌드하지 않음(기본값 없음)
            SERVICES="$(printf '%b' "$SERVICES" | sed '/^$/d' || true)"
            printf '%s\n' "$SERVICES" > .services
    
            echo "빌드 대상:"
            cat .services || true
          '''
        }
      }
    }
    // 3) (서비스별) GHCR 푸시 권한 확인
    stage('Sanity: GHCR push permission (each)') {
      when {
        expression { fileExists('.services') && readFile('.services').trim().length() > 0 }
      }
      steps {
        container('utils') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'GHCR_USR', passwordVariable: 'GHCR_PSW')]) {
            sh '''
              set -eu
              apk add --no-cache curl jq ca-certificates >/dev/null

              while read -r SVC || [ -n "$SVC" ]; do
                [ -n "$SVC" ] || continue
                case "$SVC" in
                  user-service) REPO="board-user-service" ;;
                  file-service) REPO="board-file-service" ;;
                  post-service) REPO="board-post-service" ;;
                  frontend)     REPO="board-frontend" ;;
                  nginx)        REPO="board-nginx" ;;
                  *) echo "Unknown service: $SVC" >&2; exit 2 ;;
                esac

                TOKEN="$(curl -sS -u "${GHCR_USR}:${GHCR_PSW}" \
                  "https://ghcr.io/token?service=ghcr.io&scope=repository:${ORG}/${REPO}:pull,push" | jq -r .token)"

                [ -n "${TOKEN}" ] && [ "${TOKEN}" != "null" ] || { echo "ERROR: GHCR 토큰 실패(${SVC})." >&2; exit 90; }

                CODE="$(curl -sS -o /dev/null -w '%{http_code}' \
                  -H "Authorization: Bearer ${TOKEN}" \
                  -X POST "https://ghcr.io/v2/${ORG}/${REPO}/blobs/uploads/")"

                case "$CODE" in
                  201|202) : ;;
                  401|403) echo "ERROR: GHCR 권한(${SVC}) 거부(${CODE})." >&2; exit 91 ;;
                  404)     echo "ERROR: 패키지(${REPO}) 없음(${CODE})." >&2; exit 92 ;;
                  *)       echo "ERROR: 업로드 세션 실패(${SVC}) HTTP ${CODE}." >&2; exit 93 ;;
                esac
              done < .services

              touch .push_ok
            '''
          }
        }
      }
    }

    // 4) (서비스별) 태그 결정
    stage('Decide tags (each)') {
      when {
        expression { fileExists('.services') && readFile('.services').trim().length() > 0 }
      }
      steps {
        container('utils') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'GHCR_USR', passwordVariable: 'GHCR_PSW')]) {
            sh '''
              set -eu
              apk add --no-cache curl jq ca-certificates >/dev/null
              : > .tags

              while read -r SVC || [ -n "$SVC" ]; do
                [ -n "$SVC" ] || continue
                case "$SVC" in
                  user-service) REPO="board-user-service" ;;
                  file-service) REPO="board-file-service" ;;
                  post-service) REPO="board-post-service" ;;
                  frontend)     REPO="board-frontend" ;;
                  nginx)        REPO="board-nginx" ;;
                esac

                TOKEN="$(curl -sS -u "${GHCR_USR}:${GHCR_PSW}" \
                  "https://ghcr.io/token?service=ghcr.io&scope=repository:${ORG}/${REPO}:pull" | jq -r .token)"

                curl -sS -H "Authorization: Bearer ${TOKEN}" \
                  "https://ghcr.io/v2/${ORG}/${REPO}/tags/list?n=1000" > tags.json || echo '{"tags":[]}' > tags.json

                NEXT="$(jq -r '(.tags // []) | map(select(test("^v[0-9]+$"))) | (map(sub("^v";"")|tonumber) | max // 0) + 1 | "v"+tostring' tags.json)"
                echo "${SVC}:${NEXT}" >> .tags
              done < .services

              echo "태그 결정:"
              cat .tags
            '''
          }
        }
      }
    }

    // 5) 공통 태그 강제 (선택)
    stage('Use provided IMAGE_TAG for all (optional)') {
      when { expression { return (params.IMAGE_TAG?.trim() != '') } }
      steps {
        sh '''
          set -eu
          : > .tags
          while read -r SVC || [ -n "$SVC" ]; do
            [ -n "$SVC" ] || continue
            echo "${SVC}:${IMAGE_TAG}" >> .tags
          done < .services
          echo "강제 태그:"
          cat .tags
        '''
      }
    }

    // 6) 빌드 & 푸시 (서비스별)
    stage('Build & Push (each)') {
      when {
        expression { fileExists('.services') && readFile('.services').trim().length() > 0 }
      }
      steps {
        container('buildctl') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'GHCR_USR', passwordVariable: 'GHCR_PSW')]) {
            sh '''
              set -eu
              export HOME="$PWD"
              export DOCKER_CONFIG="$PWD/.docker"
              mkdir -p "$DOCKER_CONFIG"
              AUTH="$(printf '%s:%s' "${GHCR_USR}" "${GHCR_PSW}" | base64 | tr -d '\\n')"
              printf '{ "auths": { "%s": { "auth": "%s" } } }\n' "${REGISTRY}" "${AUTH}" > "$DOCKER_CONFIG/config.json"

              while IFS=':' read -r SVC TAG || [ -n "$SVC" ]; do
                [ -n "$SVC" ] || continue
                [ -n "$TAG" ] || { echo "TAG 누락: $SVC" >&2; exit 2; }

                case "$SVC" in
                  user-service) REPO="board-user-service" ;;
                  file-service) REPO="board-file-service" ;;
                  post-service) REPO="board-post-service" ;;
                  frontend)     REPO="board-frontend" ;;
                  nginx)        REPO="board-nginx" ;;
                esac

                CONTEXT="src/app/${SVC}"
                test -f "${CONTEXT}/Dockerfile" || { echo "Dockerfile 없음: ${CONTEXT}" >&2; exit 3; }

                IMAGE="${REGISTRY}/${ORG}/${REPO}"
                echo "[buildctl] ${SVC} -> ${IMAGE}:${TAG}"

                buildctl --addr tcp://buildkitd.buildkit.svc.cluster.local:1234 \
                  --tlscacert /tls/ca.crt --tlscert /tls/client.crt --tlskey /tls/client.key \
                  build \
                    --frontend=dockerfile.v0 \
                    --local "context=${CONTEXT}" \
                    --local "dockerfile=${CONTEXT}" \
                    --output "type=image,name=${IMAGE}:${TAG},push=true" \
                    --progress=plain \
                    --metadata-file ".buildmeta.${SVC}.json"
              done < .tags
            '''
          }
        }
      }
    }

    // 7) 매니페스트 버전 범프 (단일 커밋)
    stage('Bump manifest (single commit)') {
      when {
        expression { fileExists('.services') && readFile('.services').trim().length() > 0 }
      }
      steps {
        // 7-1 clone (git 컨테이너)
        container('git') {
          withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
            sh '''
              set -eu
              rm -rf manifest && mkdir -p manifest && cd manifest
              AUTH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
              git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH}" \
                  clone --depth=1 https://github.com/DRSOL-HA/deploy_manifest.git repo
            '''
          }
        }

        // 7-2 yq로 태그 갱신 (yq 컨테이너)
        container('yq') {
          sh '''
            set -eu
            cd manifest/repo
            FILE="apps/board/kustomization.yaml"
            test -f "${FILE}"

            while IFS=':' read -r SVC TAG || [ -n "$SVC" ]; do
              [ -n "$SVC" ] || continue
              case "$SVC" in
                user-service) IMG="ghcr.io/${ORG}/board-user-service" ;;
                file-service) IMG="ghcr.io/${ORG}/board-file-service" ;;
                post-service) IMG="ghcr.io/${ORG}/board-post-service" ;;
                frontend)     IMG="ghcr.io/${ORG}/board-frontend" ;;
                nginx)        IMG="ghcr.io/${ORG}/board-nginx" ;;
                *) echo "unknown service: $SVC" >&2; exit 2 ;;
              esac
              IMAGE_NAME_CANON="$IMG"
              NEW_TAG="$TAG"
              yq -i '
                (.images[] | select((.name | downcase) == (strenv(IMAGE_NAME_CANON) | downcase))).newTag
                = strenv(NEW_TAG)
              ' "${FILE}"
            done < "$WORKSPACE/.tags"
          '''
        }

        // 7-3 커밋 & 푸시 (git 컨테이너)
        container('git') {
          withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
            sh '''
              set -eu
              cd manifest/repo
              git config user.name  "jenkins"
              git config user.email "ci@drsol-ha.local"
              git add -A
              MSG="ci: bump $(tr '\\n' ' ' < "$WORKSPACE/.tags")"
              git commit -m "${MSG}" || true

              AUTH_PUSH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
              git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH_PUSH}" push origin HEAD:main
            '''
          }
        }
      }
    }
  } // end stages

  post {
    always {
      script {
        sh '''
          set -eu
          echo "HEAD_SHA=$(cat .head_sha 2>/dev/null || echo -n '-')"
          echo "SERVICES:"
          cat .services 2>/dev/null || true
          echo "TAGS:"
          cat .tags 2>/dev/null || true
        '''
      }
    }
  }
}
