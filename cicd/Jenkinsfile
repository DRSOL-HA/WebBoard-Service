def REPOS = [
  'user-service': 'https://github.com/DRSOL-HA/WebBoard-Service.git',
  'file-service': 'https://github.com/DRSOL-HA/WebBoard-Service.git',
  'post-service': 'https://github.com/DRSOL-HA/WebBoard-Service.git',
  'frontend'    : 'https://github.com/DRSOL-HA/WebBoard-Service.git',
  'nginx'       : 'https://github.com/DRSOL-HA/WebBoard-Service.git',
]

pipeline {
  agent {
    kubernetes {
      // 기본 컨테이너는 jnlp (아무 일 안 함). 실제 작업은 각 container 블록에서 수행
      yaml """
apiVersion: v1
kind: Pod
metadata:
  labels:
    jenkins: "buildkit"
spec:
  serviceAccountName: jenkins
  restartPolicy: Never
  volumes:
    - name: tls
      secret:
        secretName: buildkit-client-tls
    - name: workspace-volume
      emptyDir: {}
  containers:
    - name: buildctl
      image: moby/buildkit:rootless
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: tls, mountPath: /tls, readOnly: true }
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: git
      image: alpine/git:2.45.2
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: yq
      image: ghcr.io/mikefarah/yq:4
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
    - name: utils
      image: alpine:3.20
      securityContext:
        runAsUser: 0
        runAsGroup: 0
      command: ["cat"]
      tty: true
      volumeMounts:
        - { name: workspace-volume, mountPath: /home/jenkins/agent }
"""
    }
  }

  parameters {
    choice(
      name: 'SERVICE',
      choices: 'user-service\nfile-service\npost-service\nfrontend\nnginx',
      description: '빌드할 서비스(디렉터리) 선택'
    )
    string(name: 'IMAGE_TAG', defaultValue: '', description: '지정하면 해당 태그로 푸시, 비우면 vN 자동 증가')
    // ✅ 실제 Jenkins 크리덴셜 ID로 기본값 맞춤
    string(name: 'GIT_CRED_ID',   defaultValue: 'GITHUB_PAT', description: 'GitHub(소스/manifest) PAT 크리덴셜 ID')
    string(name: 'GHCR_CRED_ID',  defaultValue: 'ghcr',       description: 'GHCR(이미지 푸시) PAT 크리덴셜 ID')
  }

  options {
    // 문제가 되었던 timestamps(), ansiColor()는 옵션이 아님 — 제거
    disableResume()
    durabilityHint('PERFORMANCE_OPTIMIZED')
    skipDefaultCheckout(true) // Declarative 자동 체크아웃 생략
  }

  environment {
    REGISTRY = 'ghcr.io'
    ORG      = 'drsol-ha' // GHCR 오너(조직) — 소문자 권장
  }

  stages {

    stage('Checkout Jenkinsfile repo (self)') {
      steps {
        // Jenkinsfile 저장소만 가볍게 체크아웃 (추가 소스는 다음 stage에서 별도로 clone)
        checkout scm
      }
    }

    stage('Init env (mapping)') {
      steps {
        script {
          // 서비스 -> 이미지 리포 이름 매핑
          def imageMap = [
            'user-service': 'board-user-service',
            'file-service': 'board-file-service',
            'post-service': 'board-post-service',
            'frontend'    : 'board-frontend',
            'nginx'       : 'board-nginx',
          ]
          if (!imageMap.containsKey(params.SERVICE)) {
            error "Unknown SERVICE: ${params.SERVICE}"
          }
          env.IMAGE_REPO = imageMap[params.SERVICE]

          // 모든 서비스가 동일 저장소를 쓰는 현재 구조
          def repoMap = [
            'user-service': 'https://github.com/DRSOL-HA/WebBoard-Service.git',
            'file-service': 'https://github.com/DRSOL-HA/WebBoard-Service.git',
            'post-service': 'https://github.com/DRSOL-HA/WebBoard-Service.git',
            'frontend'    : 'https://github.com/DRSOL-HA/WebBoard-Service.git',
            'nginx'       : 'https://github.com/DRSOL-HA/WebBoard-Service.git',
          ]
          env.SRC_REPO = repoMap[params.SERVICE]
        }
      }
    }

    stage('Checkout service code') {
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
            sh '''
              set -eu
              rm -rf src && mkdir -p src
              AUTH=$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')
              git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH}" \
                  clone --depth=1 -b main "${SRC_REPO}" src/app
            '''
          }
        }
      }
    }

    stage('Resolve build context') {
      steps {
        container('yq') {
          sh '''
            set -eu
            HINT="$(printf '%s' "${SERVICE}" | sed 's/-service$//')"
            FOUND=""
            for p in \
              "src/app/services/${SERVICE}" \
              "src/app/services/${HINT}" \
              "src/app/apps/${SERVICE}" \
              "src/app/apps/${HINT}" \
              "src/app/packages/${SERVICE}" \
              "src/app/packages/${HINT}" \
              "src/app/${SERVICE}" \
              "src/app/${HINT}"; do
              if [ -f "${p}/Dockerfile" ]; then FOUND="$(basename "$p")"; echo "$FOUND" > .build_context_path; break; fi
            done
            test -s .build_context_path && echo "Detected build context: $(cat .build_context_path)" || {
              echo "ERROR: Dockerfile을 찾을 수 없습니다 (SERVICE=${SERVICE})." >&2
              exit 2
            }
          '''
        }
      }
    }

    stage('Sanity: GHCR push permission') {
      steps {
        container('utils') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'GHCR_USR', passwordVariable: 'GHCR_PSW')]) {
            sh '''
              set -eu
              apk add --no-cache curl jq ca-certificates >/dev/null
              REPO="${IMAGE_REPO}"

              # Bearer 토큰(PUSH 스코프) 취득
              TOKEN="$(curl -sS -u "${GHCR_USR}:${GHCR_PSW}" \
                "https://ghcr.io/token?service=ghcr.io&scope=repository:${ORG}/${REPO}:pull,push" | jq -r .token)"

              if [ -z "${TOKEN}" ] || [ "${TOKEN}" = "null" ]; then
                echo "ERROR: GHCR 토큰을 받지 못했습니다. (크리덴셜/SSO/권한 확인)" >&2
                exit 90
              fi

              # 업로드 세션(빈 업로드) 열어 보기 — 202(혹은 201)이면 OK
              CODE="$(curl -sS -o /dev/null -w '%{http_code}' \
                -H "Authorization: Bearer ${TOKEN}" \
                -X POST "https://ghcr.io/v2/${ORG}/${REPO}/blobs/uploads/")"

              case "${CODE}" in
                201|202) echo "GHCR push check OK (${CODE})" ;;
                401|403) echo "ERROR: GHCR 권한 거부(${CODE}). PAT에 write:packages 및 Org SSO 승인 필요." >&2; exit 91 ;;
                404)     echo "ERROR: Package(${ORG}/${REPO})가 존재하지 않습니다. 최초 생성 권한/설정 확인." >&2; exit 92 ;;
                *)       echo "ERROR: GHCR 업로드 세션 실패 (HTTP ${CODE})." >&2; exit 93 ;;
              esac

              touch .push_ok
            '''
          }
        }
      }
    }

    stage('Decide IMAGE_TAG (auto bump when empty)') {
      when { expression { return (params.IMAGE_TAG?.trim() == '') } }
      steps {
        container('utils') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'GHCR_USR', passwordVariable: 'GHCR_PSW')]) {
            sh '''
              set -eu
              apk add --no-cache curl jq ca-certificates >/dev/null
              TOKEN="$(curl -sS -u "${GHCR_USR}:${GHCR_PSW}" \
                "https://ghcr.io/token?service=ghcr.io&scope=repository:${ORG}/${IMAGE_REPO}:pull" | jq -r .token)"

              curl -sS -H "Authorization: Bearer ${TOKEN}" \
                "https://ghcr.io/v2/${ORG}/${IMAGE_REPO}/tags/list?n=1000" > tags.json || echo '{"tags":[]}' > tags.json

              NEXT_TAG="$(jq -r '
                  (.tags // []) | map(select(test("^v[0-9]+$"))) |
                  (map(sub("^v";"")|tonumber) | max // 0) + 1 | "v"+tostring
                ' tags.json)"
              echo "${NEXT_TAG}" > .image_tag
              echo "Auto-decided IMAGE_TAG: ${NEXT_TAG}"
            '''
          }
        }
      }
    }

    stage('Use provided IMAGE_TAG (if any)') {
      when { expression { return (params.IMAGE_TAG?.trim() != '') } }
      steps {
        sh '''
          set -eu
          printf '%s' "${IMAGE_TAG}" > .image_tag
          echo "Using IMAGE_TAG=$(cat .image_tag)"
        '''
      }
    }

    stage('Build & Push image') {
      steps {
        container('buildctl') {
          withCredentials([usernamePassword(credentialsId: params.GHCR_CRED_ID, usernameVariable: 'GHCR_USR', passwordVariable: 'GHCR_PSW')]) {
            sh '''
              set -eu
              CONTEXT_PATH="$(cat .build_context_path)"
              IMAGE_TAG="$(cat .image_tag)"
              IMAGE_NAME="${REGISTRY}/${ORG}/${IMAGE_REPO}"

              export HOME="$PWD"
              export DOCKER_CONFIG="$PWD/.docker"
              mkdir -p "$DOCKER_CONFIG"

              AUTH="$(printf '%s:%s' "${GHCR_USR}" "${GHCR_PSW}" | base64 | tr -d '\\n')"
              printf '{ "auths": { "%s": { "auth": "%s" } } }\n' "${REGISTRY}" "${AUTH}" > "$DOCKER_CONFIG/config.json"

              echo "[buildctl] building ${IMAGE_NAME}:${IMAGE_TAG} from ${CONTEXT_PATH}"
              buildctl --addr tcp://buildkitd.buildkit.svc.cluster.local:1234 \
                --tlscacert /tls/ca.crt --tlscert /tls/client.crt --tlskey /tls/client.key \
                build \
                  --frontend=dockerfile.v0 \
                  --local "context=src/app/${CONTEXT_PATH}" \
                  --local "dockerfile=src/app/${CONTEXT_PATH}" \
                  --output "type=image,name=${IMAGE_NAME}:${IMAGE_TAG},push=true" \
                  --progress=plain \
                  --metadata-file "$PWD/.buildmeta.json"
            '''
          }
        }
      }
    }

    stage('Bump manifest tag') {
      when { expression { return fileExists('.image_tag') && fileExists('.push_ok') } }
      steps {
        container('git') {
          withCredentials([usernamePassword(credentialsId: params.GIT_CRED_ID, usernameVariable: 'GH_USER', passwordVariable: 'GH_PAT')]) {
            sh '''
              set -eu
              rm -rf manifest && mkdir -p manifest && cd manifest
              AUTH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
              git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH}" \
                  clone --depth=1 https://github.com/DRSOL-HA/deploy_manifest.git repo

              cd repo
              IMAGE_LOWER="ghcr.io/${ORG}/${IMAGE_REPO}"
              IMAGE_UPPER="ghcr.io/${ORG.toUpperCase()}/${IMAGE_REPO}"

              FILE="apps/board/kustomization.yaml"
              test -f "${FILE}"

              export NEW_TAG="$(cat "$WORKSPACE/.image_tag")"
              export IMG_LOWER="${IMAGE_LOWER}"
              export IMG_UPPER="${IMAGE_UPPER}"

              # yq v4: JSON/YAML 모두 처리 가능
              yq -i '
                (.images[] | select((.name == strenv(IMG_LOWER)) or (.name == strenv(IMG_UPPER))).newTag)
                = strenv(NEW_TAG)
              ' "${FILE}"

              git config user.name  "jenkins"
              git config user.email "ci@drsol-ha.local"
              git add -A
              git commit -m "ci: bump ${IMAGE_REPO} -> ${NEW_TAG}" || true

              AUTH_PUSH="$(printf '%s:%s' "$GH_USER" "$GH_PAT" | base64 | tr -d '\\n')"
              git -c "http.extraheader=AUTHORIZATION: Basic ${AUTH_PUSH}" push origin HEAD:main
            '''
          }
        }
      }
    }
  }

  post {
    always {
      script {
        echo "SERVICE=${params.SERVICE}"
        sh '''
          set -eu
          ls -lA || true
          if [ -f .image_tag ]; then echo "IMAGE_TAG=$(cat .image_tag)"; fi
          if [ -f .push_ok ]; then echo ".push_ok present"; else echo ".push_ok missing"; fi
        '''
      }
    }
  }
}
